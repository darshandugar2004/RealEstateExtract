import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.neighbors import NearestNeighbors

# Load dataset 
df = pd.read_csv('real_estate_data.csv')

# features for price prediction
features = ['size_sqft', 'bedrooms', 'bathrooms', 'latitude', 'longitude']
X = df[features]
y = df['price']

# Splitting data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scaling data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Price Prediction using Random Forest
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)
y_pred_rf = rf_model.predict(X_test_scaled)
print("Random Forest MAE:", mean_absolute_error(y_test, y_pred_rf))

# Price Prediction using XGBoost
xgb_model = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
xgb_model.fit(X_train_scaled, y_train)
y_pred_xgb = xgb_model.predict(X_test_scaled)
print("XGBoost MAE:", mean_absolute_error(y_test, y_pred_xgb))

# Property Recommendation System using Content-Based Filtering
property_features = ['size_sqft', 'bedrooms', 'bathrooms', 'latitude', 'longitude']
property_data = df[property_features]
scaler_prop = StandardScaler()
property_scaled = scaler_prop.fit_transform(property_data)

# Fit Nearest Neighbors model
nn_model = NearestNeighbors(n_neighbors=5, metric='euclidean')
nn_model.fit(property_scaled)

def recommend_property(index):
    distances, indices = nn_model.kneighbors([property_scaled[index]])
    recommended = df.iloc[indices[0]].drop(index)
    return recommended[['price', 'size_sqft', 'bedrooms', 'bathrooms', 'latitude', 'longitude']]

# Example usage (Recommend properties similar to the first listing)
print("Recommended Properties:")
print(recommend_property(0))
